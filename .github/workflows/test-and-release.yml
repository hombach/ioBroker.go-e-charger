name: Test and Release

# Run this job on all pushes and pull requests
# as well as tags with a semantic version
on:
  push:
    branches:
      - "*"
    tags:
      # normal versions
      - "v[0-9]+.[0-9]+.[0-9]+"
      # pre-releases
      - "v[0-9]+.[0-9]+.[0-9]+-**"
  pull_request: {}

# Cancel previous PR/branch runs when a new commit is pushed
concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true


jobs:
    # Performs quick checks before the expensive test runs
    check-and-lint:
      if: contains(github.event.head_commit.message, '[skip ci]') == false
  
      runs-on: ubuntu-latest
  
      steps:
        - uses: ioBroker/testing-action-check@v1
          with:
            node-version: 20
            # Uncomment the following line if your adapter cannot be installed using 'npm ci'
            # install-command: 'npm install'
            # type-checking: true
            lint: true

    check-and-lint-old:
      if: contains(github.event.head_commit.message, '[skip ci]') == false

      runs-on: ubuntu-latest

      strategy:
        matrix:
          node-version: [20.x]
  
      steps:
        - uses: actions/checkout@v4
        - name: Use Node.js ${{ matrix.node-version }}
          uses: actions/setup-node@v4
          with:
            node-version: ${{ matrix.node-version }}

        - name: NPM version
          run: npm -v

        - name: Install Dependencies
          #run: npm install
          run: npm install --legacy-peer-deps

    build-old:
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - uses: actions/setup-node@v4
          with:
            node-version: 20
          #run: npm install
        - run: npm install --legacy-peer-deps
        #- run: npm run build

    # Runs adapter tests on all supported new node versions and OSes
    adapter-tests-old:
      if: contains(github.event.head_commit.message, '[skip ci]') == false
      needs: [check-and-lint-old, build-old]

      runs-on: ${{ matrix.os }}
      strategy:
        matrix:
          node-version: [18.x, 20.x]
          os: [ubuntu-latest, windows-latest, macos-latest]

      steps:
        - uses: actions/checkout@v4
        - name: Use Node.js ${{ matrix.node-version }}
          uses: actions/setup-node@v4
          with:
            node-version: ${{ matrix.node-version }}

        - name: Install Dependencies
          #run: npm install
          run: npm install --legacy-peer-deps

        - name: Run local Tests
          run: npm test

    # Runs adapter tests on all supported node versions and OSes
    adapter-tests:
      needs: [check-and-lint]
      runs-on: ${{ matrix.os }}
      strategy:
        matrix:
          node-version: [18.x, 20.x, 21.x]
          os: [ubuntu-latest, macos-latest, windows-latest]

      steps:
        - uses: ioBroker/testing-action-adapter@v1
          with:
            node-version: ${{ matrix.node-version }}
            os: ${{ matrix.os }}
            # Uncomment the following line if your adapter cannot be installed using 'npm ci'
            install-command: 'npm install'
            # build: true

          
# TODO: To enable automatic npm releases, create a token on npmjs.org 
# Enter this token as a GitHub secret (with name NPM_TOKEN) in the repository options
# Then uncomment the following block:

#  # Deploys the final package to NPM
#  deploy:
#    needs: [check-and-lint, adapter-tests]
#
#    # Trigger this step only when a commit on any branch is tagged with a version number
#    if: |
#      contains(github.event.head_commit.message, '[skip ci]') == false &&
#      github.event_name == 'push' &&
#      startsWith(github.ref, 'refs/tags/v')
#
#    runs-on: ubuntu-latest
#
#    steps:
#      - uses: ioBroker/testing-action-deploy@v1
#        with:
#          node-version: '18.x'
#          # Uncomment the following line if your adapter cannot be installed using 'npm ci'
#          # install-command: 'npm install'
#          build: true
#          npm-token: ${{ secrets.NPM_TOKEN }}
#          github-token: ${{ secrets.GITHUB_TOKEN }}
#
#          # When using Sentry for error reporting, Sentry can be informed about new releases
#          # To enable create a API-Token in Sentry (User settings, API keys)
#          # Enter this token as a GitHub secret (with name SENTRY_AUTH_TOKEN) in the repository options
#          # Then uncomment and customize the following block:
#          sentry: true
#          sentry-token: ${{ secrets.SENTRY_AUTH_TOKEN }}
#          sentry-project: "iobroker-tibberlink"
#          sentry-version-prefix: "iobroker.tibberlink"
#          sentry-sourcemap-paths: "build/"
#          # If your sentry project is linked to a GitHub repository, you can enable the following option
#          # sentry-github-integration: true